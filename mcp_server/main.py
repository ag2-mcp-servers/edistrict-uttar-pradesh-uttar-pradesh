# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T15:01:24+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity

from models import (
    AcademicCertificateSchema,
    BtcerCertificatePostRequest,
    BtcerCertificatePostResponse,
    BtcerCertificatePostResponse1,
    BtcerCertificatePostResponse2,
    BtcerCertificatePostResponse3,
    BtcerCertificatePostResponse4,
    BtcerCertificatePostResponse5,
    BtcerCertificatePostResponse6,
    CtcerCertificatePostRequest,
    CtcerCertificatePostResponse,
    CtcerCertificatePostResponse1,
    CtcerCertificatePostResponse2,
    CtcerCertificatePostResponse3,
    CtcerCertificatePostResponse4,
    CtcerCertificatePostResponse5,
    CtcerCertificatePostResponse6,
    DmcerCertificatePostRequest,
    DmcerCertificatePostResponse,
    DmcerCertificatePostResponse1,
    DmcerCertificatePostResponse2,
    DmcerCertificatePostResponse3,
    DmcerCertificatePostResponse4,
    DmcerCertificatePostResponse5,
    DmcerCertificatePostResponse6,
    DpicrCertificatePostRequest,
    DpicrCertificatePostResponse,
    DpicrCertificatePostResponse1,
    DpicrCertificatePostResponse2,
    DpicrCertificatePostResponse3,
    DpicrCertificatePostResponse4,
    DpicrCertificatePostResponse5,
    DpicrCertificatePostResponse6,
    DtcerCertificatePostRequest,
    DtcerCertificatePostResponse,
    DtcerCertificatePostResponse1,
    DtcerCertificatePostResponse2,
    DtcerCertificatePostResponse3,
    DtcerCertificatePostResponse4,
    DtcerCertificatePostResponse5,
    DtcerCertificatePostResponse6,
    IncerCertificatePostRequest,
    IncerCertificatePostResponse,
    IncerCertificatePostResponse1,
    IncerCertificatePostResponse2,
    IncerCertificatePostResponse3,
    IncerCertificatePostResponse4,
    IncerCertificatePostResponse5,
    IncerCertificatePostResponse6,
)

app = MCPProxy(
    description="eDistrict UP (http://edistrict.up.nic.in/) is the online service delivery portal for UP State Govt. Certain documents issued by it (e.g. Birth, Income, Caste Certificates etc) can be pulled into citizens' DigiLocker accounts.",
    termsOfService='https://apisetu.gov.in/terms.php',
    title='eDistrict Uttar Pradesh, Uttar Pradesh',
    version='3.0.0',
    servers=[{'url': 'https://apisetu.gov.in/edistrictup/v3'}],
)


@app.post(
    '/btcer/certificate',
    description=""" API to verify Birth Certificate. """,
    tags=['certificate_handling'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def btcer(body: BtcerCertificatePostRequest = None):
    """
    Birth Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ctcer/certificate',
    description=""" API to verify Caste Certificate. """,
    tags=['certificate_handling'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def ctcer(body: CtcerCertificatePostRequest = None):
    """
    Caste Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/dmcer/certificate',
    description=""" API to verify Domicile Certificate. """,
    tags=['certificate_handling'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def dmcer(body: DmcerCertificatePostRequest = None):
    """
    Domicile Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/dpicr/certificate',
    description=""" API to verify Disabled Person Identity Card/ Certificate. """,
    tags=['certificate_handling'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def dpicr(body: DpicrCertificatePostRequest = None):
    """
    Disabled Person Identity Card/ Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/dtcer/certificate',
    description=""" API to verify Death Certificate. """,
    tags=['certificate_handling'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def dtcer(body: DtcerCertificatePostRequest = None):
    """
    Death Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/incer/certificate',
    description=""" API to verify Income Certificate. """,
    tags=['certificate_handling'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def incer(body: IncerCertificatePostRequest = None):
    """
    Income Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
